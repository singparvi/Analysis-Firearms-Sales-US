# -*- coding: utf-8 -*-
"""US_Gun_Sales_Analysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1NlK2ffC8nTIkctjUhlEkmK_hti5TUJ13

This notebook imports population that was build using US_Population_By_State_Final.ipynb and then use the Gun_Sales data taken from https://github.com/singparvi/nics-firearm-background-checks. This source uses https://www.fbi.gov/services/cjis/nics database to collect the data and provide in a CSV format.
"""

# import major libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import matplotlib.ticker as ticker
import calendar
url = 'https://raw.githubusercontent.com/BuzzFeedNews/nics-firearm-background-checks/master/data/nics-firearm-background-checks.csv'

df = pd.read_csv(url)

df.head()

"""## Plot MoM US Gun Sales data in a line plot from 2000-2020"""

# plotting monthly sales across US
monthly_sales =  pd.pivot_table(data = df, index = 'month', columns= 'state', values= 'totals')
monthly_sales = monthly_sales.reset_index()
monthly_sales['total'] = monthly_sales.iloc[:,1:].sum(axis = 1)
monthly_sales = monthly_sales[~((monthly_sales.month.str.contains('1998')) | (monthly_sales.month.str.contains('1999')) | (monthly_sales.month.str.contains('2000')))]
monthly_sales.head()

import plotly.express as px
# # # making a line plot in order to explain the events over the history of sales increases
fig = px.line(data_frame= monthly_sales, x = 'month', y = 'total', title= 'US Annual Gun Sales')
fig.update_layout(title_x = 0.5, xaxis_tickformat = '%Y-%B')
fig.show()
# uncomment to export the html file in local directory
# import plotly.io as pio
# pio.write_html(fig, file='US_MoM_Gun_Sales.html', auto_open=False)

# Chaning month to datetime format as it is defined as object earlier
df['month'] =pd.to_datetime(df['month'])
df.head()

# making separate columns for month and year
df['month'][0].year

{m: i for i, m in enumerate(calendar.month_abbr) if m}

def to_year(string):
    return string.year

def to_month(string):
    return string.month
df_new = df
df_new['year'] = df['month'].apply(to_year)
df_new['month'] = df['month'].apply(to_month)
df_new

# Rearranging columns
column_list = df.columns.tolist()
df_new = df_new[['year','month','state','totals']]
df_new

# find the number of unique value in a column 
df_new['state'].nunique()

# importing states codes for plotly
state_code_url = 'https://raw.githubusercontent.com/plotly/datasets/master/2011_us_ag_exports.csv'
state_codes = pd.read_csv(state_code_url)
state_codes = state_codes[['code', 'state']]
# df_new was 14575 rows × 28 columns

#merging guns_sales with state codes
guns_sales = pd.merge(df_new, state_codes, on = 'state')
# guns_sales is 13250 rows × 29 columns

condition = (guns_sales['year'] == 1998) | (guns_sales['year'] == 1999) | (guns_sales['year'] == 2000)
# removing the data for 1998, 1999 and 2000
guns_sales = guns_sales.drop(labels= guns_sales[condition].index, axis=0)
guns_sales = guns_sales[['year', 'month', 'state', 'totals', 'code']]
# guns_sales is now 11950 rows vs 13250 rows earlier and 98,99 and 00 year data is dropped
# along with not required columns
guns_sales

# Making a new column with code_year for df_new DF to merge population from us_pop
guns_sales['year'] = guns_sales['year'].apply(str)
guns_sales['code_year'] = guns_sales['code'] + guns_sales['year']
guns_sales

# making a new column in guns_sales to match US_Population_1990-2020.csv generated from US_Population_By_State_Final.ipynb
guns_sales['month'] = guns_sales['month'].apply(str)
guns_sales['code'] = guns_sales['code'].apply(str)
guns_sales['year'] = guns_sales['year'].apply(str)
guns_sales['vlookup'] = guns_sales['code'] + "+" + guns_sales['year']   + "+" + guns_sales['month'] 
guns_sales

# importing US_Population_1990-2020.csv in which US population data was built from 1990-2000 
# using US_Population_By_State_Final.ipynb
us_pop_url = 'https://raw.githubusercontent.com/singparvi/US-Gun-Sales/main/US_Population.csv'
us_pop = pd.read_csv(us_pop_url)
us_annual_pop = us_pop[us_pop.code == 'USA']
us_annual_pop.drop(['code', 'month', 'vlookup'], axis = 1, inplace= True)

us_pop.drop(['code', 'year', 'month'], axis = 1, inplace = True)
us_pop

# merging the guns_sales and population DataFrame
guns_sales = guns_sales.merge(us_pop, on = 'vlookup')
guns_sales.drop(['code_year', 'vlookup'], axis = 1,inplace= True)

# Calculate gun_sales_per_100k
guns_sales['gun_sales_per_100k'] = guns_sales['totals'] * 1000 / guns_sales['population'] 
guns_sales.head()

# Changing month to int format
guns_sales['month'] = guns_sales['month'].apply(int)
guns_sales.info()

# change integer months to string months
import calendar

def month_int_to_str(integer):
    return calendar.month_name[integer]

guns_sales['month'] = guns_sales['month'].apply(month_int_to_str)

# Getting the annual sales of data and plotting it to see the trend
df_annual_data_bystate = pd.pivot_table(guns_sales, index = ['state','year',], values= 'totals', aggfunc= 'sum')
df_annual_data_bystate = df_annual_data_bystate.reset_index()

# another time in order to get a Data Frame of annual sales
df_annual_data_bystate = pd.pivot_table(df_annual_data_bystate, index = 'year', values= 'totals', aggfunc= 'sum')
df_annual_data_bystate = df_annual_data_bystate.reset_index()

# Changing year to int value and merging us_annual_gunsales_pop with us_annual_pop 
df_annual_data_bystate.year = df_annual_data_bystate.year.apply(int)
us_annual_gunsales_pop = df_annual_data_bystate.merge(us_annual_pop, on = 'year')
us_annual_gunsales_pop = us_annual_gunsales_pop.drop_duplicates()
us_annual_gunsales_pop = us_annual_gunsales_pop.rename(columns= {'totals': 'gun sales'})

## Installing chart_studio using bash

!pip install chart_Studio

# use US annual gunsales along with US annual population to plot
import plotly.express as px
import chart_studio
import chart_studio.plotly as py
fig = px.bar(us_annual_gunsales_pop, x = 'year', y = 'gun sales', color = 'population', labels={'pop:population of US'}, 
             height= 900, title= 'US Annual Gun Sales and Population')
fig.update_layout(title_x = 0.5, xaxis = dict(tickmode = 'linear', tick0 = 2000, dtick = 1))
fig.update_xaxes(tickangle=90)

fig.show()
# uncomment to export the html file in local directory
# import plotly.io as pio
# pio.write_html(fig, file='Barplot_YoY_Gun_Sales_Population.html', auto_open=False)

us_annual_gunsales_pop.head()



"""Make DataFrame using pivot table so that months are removed and there is one total for guns sold in any year"""

# Making DF to have total annual sales condensed in one row per state for any year
ann_sales_pop_bystate = pd.pivot_table(guns_sales, index = ['year', 'state', 'code','population'], values='totals', aggfunc= 'sum')
ann_sales_pop_bystate = ann_sales_pop_bystate.reset_index()
# Calculate gun_sales_per_100k
ann_sales_pop_bystate['gun_sales_per_100k'] = ann_sales_pop_bystate['totals'] * 1000 / ann_sales_pop_bystate['population'] 
ann_sales_pop_bystate.head()

"""## Total Annual Gun Sales and Population of US States by Year Choropleth map"""

# for total guns taken into account

# plotting the figure with animation
fig = px.choropleth(ann_sales_pop_bystate, locations = 'code', scope ='usa', locationmode='USA-states', color= 'totals',
                    hover_name= 'population', hover_data=['population'], animation_frame= 'year', 
                    color_continuous_scale='Inferno', title = 'Total Annual Gun Sales and Population of US States by Year', height = 800
                    )
fig.update_layout(title_x = 0.5)
fig.show()

# uncomment to export the html file in local directory
# import plotly.io as pio
# pio.write_html(fig, file='Choropleth_Annual_Gun_Sales_Population.html', auto_open=False)

"""## Annual Gun Sales per 100k population of US States Choropleth map"""

# for PER 100k taken into account

# plotting the figure with animation
fig = px.choropleth(ann_sales_pop_bystate, locations = 'code', scope ='usa', locationmode='USA-states', color= 'gun_sales_per_100k',
                    hover_name= 'population', hover_data=['population'], animation_frame= 'year', 
                    color_continuous_scale='Inferno', title = 'Annual Gun Sales per 100k population of US States', height = 800
                    )
fig.update_layout(title_x = 0.5)
fig.show()
# uncomment to export the html file in local directory
# import plotly.io as pio
# pio.write_html(fig, file='Choropleth_Annual_Gun_Sales_100k.html', auto_open=False)

"""## Plotting states for 2019 to see how it looks"""

fig = px.bar(ann_sales_pop_bystate[ann_sales_pop_bystate.year == '2019'], x = 'code', y = 'totals', color = 'population', labels={'pop:population of US'}
             , height= 400, title= 'US Gun Sales for 2019 by State')
fig.update_layout(title_x = 0.5)
fig.show()

# upgrading plotly to remove path error in the following execution

!pip install --upgrade plotly

"""## Treemap for the Population in US from 2001 to 2020."""

# treemap for the population growth over the years
import plotly.express as px
import plotly.graph_objects as go

# We have a list for every day
# In your case will be gropuby('RuleName')
# here for every element d
# d[0] is the name(key) and d[1] is the dataframe
dfs = list(ann_sales_pop_bystate.groupby("year"))

first_title = dfs[0][0]
traces = []
buttons = []
for i,d in enumerate(dfs):
    visible = [False] * len(dfs)
    visible[i] = True
    name = d[0]
    traces.append(
        px.treemap(d[1],
                   path=['year', 'code', ],
                   values='population', title = 'US Population Treemap').update_traces(visible=True if i==0 else False).data[0]
    )
    buttons.append(dict(label=name,
                        method="update",
                        args=[{"visible":visible},
                              {"title":f"{name}"}]))

updatemenus = [{'active':0, "buttons":buttons}]

fig = go.Figure(data=traces,
                 layout=dict(updatemenus=updatemenus))
fig.update_layout(title=first_title, title_x=0.5)
fig.show()
# uncomment to export the html file in local directory
# import plotly.io as pio
# pio.write_html(fig, file='Treemap_US_Population.html', auto_open=False)

# Code to export to online portal
# uncomment to export the html file in chart_studio portal 
# import chart_studio.plotly as py
# py.plot(fig, filename= 'Treemap_US_Population', auto_open=False)

"""## Total Annual Gun Sales and Population of US States by Year Dropdown Menu"""

# bar plot for the guns sales per year by state
import plotly.express as px
import plotly.graph_objects as go

# We have a list for every day
# In your case will be gropuby('RuleName')
# here for every element d
# d[0] is the name(key) and d[1] is the dataframe
dfs = list(ann_sales_pop_bystate.groupby("year"))

first_title = dfs[0][0]
traces = []
buttons = []
for i,d in enumerate(dfs):
    visible = [False] * len(dfs)
    visible[i] = True
    name = d[0]
    traces.append(px.bar(d[1], x = 'code', y = 'totals', color = 'population', labels=dict(x="Fruit", y="Amount", color="Place"), height= 800).update_traces(visible=True if i==0 else False).data[0])
        # px.treemap(d[1],
        #            path=['year', 'code', ],
        #            values='population').update_traces(visible=True if i==0 else False).data[0]
        
  
    buttons.append(dict(label=name,
                        method="update",
                        args=[{"visible":visible},
                              {"title":f"{name}"}]))

updatemenus = [{'active':0, "buttons":buttons}]

fig = go.Figure(data=traces,
                 layout=dict(updatemenus=updatemenus))
fig.update_layout(title=first_title, title_x=0.5, title_text = 'Total Annual Gun Sales and Population of US States by Year ')
fig.show()
# uncomment to export the html file in local directory
# import plotly.io as pio
# pio.write_html(fig, file='Barplot_Annual_Gun_Sales_Population.html', auto_open=False)

"""## Total Annual Gun Sales and Population of US States Bar Chart Race"""

!pip install raceplotly

# plotting bar chart and then exporting to file
from raceplotly.plots import barplot

my_raceplot = barplot(ann_sales_pop_bystate, item_column= 'state',value_column= 'totals', time_column='year', top_entries= 15)
a = my_raceplot.plot(title = 'Total Annual Gun Sales and Population of US States by Year', item_label= 'US States', value_label= 'Gun Sales', time_label= 'Year = ', frame_duration= 800, orientation= 'vertical')
a.show()
# uncomment to export the html file in local directory
# import plotly.io as pio
# pio.write_html(a, file='BarChartRace_Annual_Gun_Sales_Population.html', auto_open=False)

"""## Annual Gun Sales per 100k population of US States by Year Dropdown Menu"""

# bar plot for the guns sales per 100k people by state in any year
import plotly.express as px
import plotly.graph_objects as go

# We have a list for every day
# In your case will be gropuby('RuleName')
# here for every element d
# d[0] is the name(key) and d[1] is the dataframe
dfs = list(ann_sales_pop_bystate.groupby("year"))

first_title = dfs[0][0]
traces = []
buttons = []
for i,d in enumerate(dfs):
    visible = [False] * len(dfs)
    visible[i] = True
    name = d[0]
    traces.append(px.bar(d[1], x = 'code', y = 'gun_sales_per_100k', color = 'population', width= 200, height= 200).update_traces(visible=True if i==0 else False).data[0])
        # px.treemap(d[1],
        #            path=['year', 'code', ],
        #            values='population').update_traces(visible=True if i==0 else False).data[0]
        
  
    buttons.append(dict(label=name,
                        method="update",
                        args=[{"visible":visible},
                              {"title":f"{name}"}]))

updatemenus = [{'active':0, "buttons":buttons}]

fig = go.Figure(data=traces,
                 layout=dict(updatemenus=updatemenus))
fig.update_layout(title=first_title, title_x=0.5, title_text = 'Annual Gun Sales per 100k population of US States by Year ')
fig.show()

# uncomment to export the html file in local directory
# import plotly.io as pio
# pio.write_html(fig, file='Barplot_Annual_Gun_Sales_100k.html', auto_open=False)

"""## Annual Gun Sales per 100k population of US States Bar Chart Race"""

# plotting bar chart and then exporting to file
from raceplotly.plots import barplot

my_raceplot = barplot(ann_sales_pop_bystate, item_column= 'state',value_column= 'gun_sales_per_100k', time_column='year', top_entries= 15)
a = my_raceplot.plot(title = 'Annual Gun Sales per 100k population of US States by Year', item_label= 'US States', value_label= 'Gun Sales per 100k population', time_label= 'Year = ', frame_duration= 800, orientation= 'vertical')
a.show()
# uncomment to export the html file in local directory
import plotly.io as pio
pio.write_html(a, file='BarChartRace_Annual_Gun_Sales_100k.html', auto_open=False)

"""The following section will do statistical tests to find the correlation between population and sales."""

# Convert population and year to int format
ann_sales_pop_bystate['population'] = ann_sales_pop_bystate['population'].apply(int)
ann_sales_pop_bystate['year'] = ann_sales_pop_bystate['year'].apply(int)
ann_sales_pop_bystate.info()

## Followig data analysis is for Kentucky State

# plotting KY_Data as regression
KY_data = ann_sales_pop_bystate[ann_sales_pop_bystate.code == 'KY']
sns.regplot(KY_data['year'], KY_data['gun_sales_per_100k'])
xvalue = KY_data['year']
plt.xticks(xvalue, rotation=90)
plt.show()

# finding the correlation coefficient for KY_data
r = np.corrcoef(KY_data['year'], KY_data['gun_sales_per_100k'])
print ('The correlation coefficient for gun_sales_per_100k and year for Kentucky state is', r[0,1], '\n \n ')

# running the ols model of regression fitting on KY_data
from statsmodels.formula.api import ols
model = ols('gun_sales_per_100k ~ year', data = KY_data).fit()
print (model.summary())

## Followig data analysis is for Illinois State

# plotting IL_Data as regression
IL_data = ann_sales_pop_bystate[ann_sales_pop_bystate.code == 'IL']
sns.regplot(IL_data['year'], IL_data['gun_sales_per_100k'])
xvalue = IL_data['year']
plt.xticks(xvalue, rotation=90)
plt.show()

# finding the correlation coefficient for IL_data
r = np.corrcoef(IL_data['year'], IL_data['gun_sales_per_100k'])
print ('The correlation coefficient for gun_sales_per_100k and year for Illinois state is', r[0,1], '\n \n ')

# running the ols model of regression fitting on IL_data
from statsmodels.formula.api import ols
model = ols('gun_sales_per_100k ~ year', data = IL_data).fit()
print (model.summary())

## Followig data analysis is for Utah State

# plotting UT_Data as regression
UT_data = ann_sales_pop_bystate[ann_sales_pop_bystate.code == 'UT']
sns.regplot(UT_data['year'], UT_data['gun_sales_per_100k'])
xvalue = UT_data['year']
plt.xticks(xvalue, rotation=90)
plt.show()

# finding the correlation coefficient for UT_data
r = np.corrcoef(UT_data['year'], UT_data['gun_sales_per_100k'])
print ('The correlation coefficient for gun_sales_per_100k and year for Utah state is', r[0,1], '\n \n ')

# running the ols model of regression fitting on UT_data
from statsmodels.formula.api import ols
model = ols('gun_sales_per_100k ~ year', data = UT_data).fit()
print (model.summary())