# -*- coding: utf-8 -*-
"""US_Population_By_State_Final.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1AhvWbAxKoKtdoH4HxhgLZ-1H8novh9xT
"""

#importing data in DataFrame forked from https://github.com/jakevdp/data-USstates 
# data imported has values only from 1990-2013 therefore another data will be used to 
# fill the gap between 2013-2020
import pandas as pd
data = pd.read_csv('https://raw.githubusercontent.com/singparvi/data-USstates/master/state-population.csv')
data.columns = ['state', 'ages', 'year', 'population']
data

# removing rows that have 'under18' values and dropping ages column
data = data[data.ages != 'under18']
data.shape
data.drop(labels = 'ages', axis = 1)
data.sort_values(by = 'year')

# Importing data from census.gov that includes population from 2010 census and estimate projections till 2019

url_2 = 'http://www2.census.gov/programs-surveys/popest/datasets/2010-2019/national/totals/nst-est2019-alldata.csv'
new_pop_data = pd.read_csv(url_2)
new_pop_data.head()

# No data for 2020 population in the DataFrame therefore using y-o-y growth from 2018-2019 to project for 2020

US_Population_2018 = 326687501
US_Population_2019 = 328239523

y_o_y_growth = (US_Population_2019/US_Population_2018)
df = pd.DataFrame()
new_pop_data['POPESTIMATE2020'] = new_pop_data['POPESTIMATE2019'] * y_o_y_growth
new_pop_data['POPESTIMATE2020'] = new_pop_data['POPESTIMATE2020'].apply(int)

# get the list of all the columns
#new_pop_data.columns.to_list()

#Using the list above to make a subset
new_pop_data_subset = new_pop_data[['NAME',
 'CENSUS2010POP',
 'POPESTIMATE2010',
 'POPESTIMATE2011',
 'POPESTIMATE2012',
 'POPESTIMATE2013',
 'POPESTIMATE2014',
 'POPESTIMATE2015',
 'POPESTIMATE2016',
 'POPESTIMATE2017',
 'POPESTIMATE2018',
 'POPESTIMATE2019',
 'POPESTIMATE2020'
 ]]
new_pop_data_subset = new_pop_data_subset.drop(labels =[1,2,3,4],axis = 0)
new_pop_data_subset = new_pop_data_subset.drop('CENSUS2010POP', axis=1)
new_pop_data_subset.columns = [columns.replace('POPESTIMATE',"") for columns in new_pop_data_subset]
new_pop_data_subset = new_pop_data_subset.drop(labels = ['2010','2011','2012','2013'], axis=1)
new_pop_data_subset.rename(columns={'NAME':'state'}, inplace=True)
new_pop_data_subset

# Getting state codes to enable plotly plotting

state_code_url = 'https://raw.githubusercontent.com/plotly/datasets/master/2011_us_ag_exports.csv'
state_codes = pd.read_csv(state_code_url)
state_codes = state_codes[['code', 'state']]
state_codes.shape

#Adding another row with USA as a code
add = {'code':['USA'],
       'state':['United States']}
add = pd.DataFrame(data = add, columns= ['code', 'state'],)
state_codes = pd.concat([state_codes, add], axis=0)
state_codes.shape

# Unpivoting the pivot_table in a long table format instead

new_pop_data_subset = pd.melt(new_pop_data_subset,id_vars= ['state'], value_vars= ['2014', '2015', '2016', '2017', '2018', '2019', '2020'])
new_pop_data_subset.rename(columns = {'variable': 'year', 'value': 'population'}, inplace= True)
new_pop_data_subset.head()

# merging the new_pop_data_subset (that includes population data from 2014-2020) with state code
new_pop_data_subset = pd.merge(state_codes, new_pop_data_subset, on = 'state')
new_pop_data_subset.shape

# generate dataframe to include months in new_pop_data_subset 
# this will help in bringing the data format in the same style as the Gun Sales
# data the population data is planned to be used with 

new_pop_data_subset['month'] = 'NaN'
new_pop_data_subset_1 = new_pop_data_subset.copy()
# new_pop_data_subset_2 = new_pop_data_subset.copy()
new_pop_data_subset_1['month'] = 1
# new_pop_data_subset_2['month'] = 2
new_pop_data_subset_2 = new_pop_data_subset.copy()

# running a loop to generate and include monthly data in new_pop_data_subset DataFrame
for i in range (2,13):
  new_pop_data_subset_2['month'] = i
  new_pop_data_subset_1 = pd.concat([new_pop_data_subset_1,new_pop_data_subset_2])
new_pop_data_subset_1

# Verifying the data by selecting the 2020 year
new_pop_data_subset_1[new_pop_data_subset_1['year'] == '2020']

# Reminder: data includes US population data for each state from 1990-2013
data.rename(columns = {'state':'code'}, inplace = True)
data.head()
# new_pop_data_subset_1.head()

# comment after one run 
data.drop('ages', axis = 1, inplace = True)
new_pop_data_subset_1.drop('state', axis = 1, inplace = True)

# generate dataframe to include months in new_pop_data_subset 
# this will help in bringing the data format in the same style as the Gun Sales
# data the population data is planned to be used with 

data['month'] = 'NaN'
data_1 = data.copy()
data_2 = data.copy()
data_1['month'] = 1
for i in range (2,13):
  data_2['month'] = i
  data_1 = pd.concat([data_1,data_2])
data_1

# Finally merging data_1 (population data with 1990-2013 data) with new_pop_data_subset_1 (population data with 2013-2020 data)
merge = pd.concat([data_1, new_pop_data_subset_1])

# Checking merge data by applying condition
condition = (merge['code'] == 'AL') & (merge['year'] == 2012)
merge[condition]

# making a new column to match from in the Guns_Sales DataFrame
merge['month'] = merge['month'].apply(str)
merge['code'] = merge['code'].apply(str)
merge['year'] = merge['year'].apply(str)

merge['vlookup'] = merge['code'] + "+" + merge['year']   + "+" + merge['month']

merge.info()

merge = merge.dropna(axis=0)

merge[merge.code == 'USA']

merge

# Export data to a CSV format
merge.to_csv(r'US_Population_1990-2020.csv', index = False)